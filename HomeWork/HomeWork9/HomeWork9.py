from time import sleep

print('''
Задание 1.
Напишите функцию to_dict(lst), 
которая принимает аргумент в виде списка и возвращает словарь, 
в котором каждый элемент списка является и ключом и значением. 
Предполагается, что элементы списка будут соответствовать правилам 
задания ключей в словарях.
''')

def to_dict(lst):
    return dict(zip(lst, lst))

sleep(2)
print('Решение')
lst = ['Маша', 'Паша', 'Каша', 'и', 'Артем']
print(f'Исходный список: {lst}')
print(f'Словарь: {to_dict(lst)}')
print('____________________________________________________________________________________________')


print('''
Задание 2.
Иван решил создать самый большой словарь в мире. 
Для этого он придумал функцию biggest_dict(**kwargs), 
которая принимает неограниченное количество параметров «ключ: значение» 
и обновляет созданный им словарь my_dict, состоящий всего из одного элемента 
«first_one» со значением «we can do it». Воссоздайте эту функцию. 
''')

my_dict = {'first_one' : 'we can do it'}

def biggest_dict(**kwargs):
    my_dict.update(**kwargs)

sleep(2)
print('Решение')
print(f'Исходный словарь: {my_dict}')
biggest_dict(собака='овчарка') 
print(f'Обновленный словарь: {my_dict}')
biggest_dict(змея='анаконда', друг='питон') 
print(f'Обновленный словарь: {my_dict}')

print('____________________________________________________________________________________________')


print('''
Задание 3.
Дана строка в виде случайной последовательности чисел от 0 до 9.
Требуется создать словарь, который в качестве ключей будет принимать данные числа 
(т. е. ключи будут типом int), а в качестве значений – количество этих чисел 
в имеющейся последовательности. Для построения словаря создайте функцию count_it(sequence), 
принимающую строку из цифр. Функция должна возвратить словарь из 3-х самых часто встречаемых чисел. 
''')

my_dict = {'first_one' : 'we can do it'}

def biggest_dict(**kwargs):
    my_dict.update(**kwargs)

sleep(2)
print('Решение')
def count_it(sequence):	
    num_frequency = {int(item): sequence.count(item) for item in sequence}
    sorted_num_frequency = sorted(num_frequency.items(), key=lambda element: element[1])
    return dict(sorted_num_frequency[-3:])

print(count_it('1111111111222'))
print(count_it('123456789012133288776655353535353441111'))
print(count_it('007767757744331166554444'))

print('____________________________________________________________________________________________')